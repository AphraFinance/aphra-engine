{
  "address": "0xf2feC13CDB46760E065DDC1DF9dA16Cb87AFD61f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "TOKEN_ADDR_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "GOVERNANCE_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "AUTHORITY_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Authority",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum veAPHRA.DepositType",
          "name": "deposit_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "abstain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "attach",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "attachments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "badgeDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAtNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "balanceOfNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOfNFTAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "block_number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lock_duration",
          "type": "uint256"
        }
      ],
      "name": "create_lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lock_duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "create_lock_for",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "detach",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "get_last_user_slope",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increase_amount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lock_duration",
          "type": "uint256"
        }
      ],
      "name": "increase_unlock_time",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUnlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked__end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownership_change",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "point_history",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Authority",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newDescription",
          "type": "string"
        }
      ],
      "name": "setBadgeDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "setVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slope_changes",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAtT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "user_point_epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "user_point_history",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "user_point_history__ts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "voting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bdb426a673cb5c8bd031fe7c4d63dbf78063832a7393503b11e4e829b7c56f8",
  "receipt": {
    "to": null,
    "from": "0x1594B6Fd7C346376E51C4Cf46525a9c57c5ea916",
    "contractAddress": "0xf2feC13CDB46760E065DDC1DF9dA16Cb87AFD61f",
    "transactionIndex": 101,
    "gasUsed": "4137250",
    "logsBloom": "0x
    "blockHash": "0x24a3752be27e1f86253995b1aad190dd9a2e78337e16fe0481dc569c59661e91",
    "transactionHash": "0x7bdb426a673cb5c8bd031fe7c4d63dbf78063832a7393503b11e4e829b7c56f8",
    "logs": [
      {
        "transactionIndex": 101,
        "blockNumber": 14276366,
        "transactionHash": "0x7bdb426a673cb5c8bd031fe7c4d63dbf78063832a7393503b11e4e829b7c56f8",
        "address": "0xf2feC13CDB46760E065DDC1DF9dA16Cb87AFD61f",
        "topics": [
          "0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76",
          "0x0000000000000000000000001594b6fd7c346376e51c4cf46525a9c57c5ea916",
          "0x0000000000000000000000004d03fb78bda67a04f1bd6fde5024759d8ce8d866"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x24a3752be27e1f86253995b1aad190dd9a2e78337e16fe0481dc569c59661e91"
      },
      {
        "transactionIndex": 101,
        "blockNumber": 14276366,
        "transactionHash": "0x7bdb426a673cb5c8bd031fe7c4d63dbf78063832a7393503b11e4e829b7c56f8",
        "address": "0xf2feC13CDB46760E065DDC1DF9dA16Cb87AFD61f",
        "topics": [
          "0xa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b76389980198",
          "0x0000000000000000000000001594b6fd7c346376e51c4cf46525a9c57c5ea916",
          "0x000000000000000000000000cbb46b017e8d785c107e97c56135894b3ead599c"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x24a3752be27e1f86253995b1aad190dd9a2e78337e16fe0481dc569c59661e91"
      },
      {
        "transactionIndex": 101,
        "blockNumber": 14276366,
        "transactionHash": "0x7bdb426a673cb5c8bd031fe7c4d63dbf78063832a7393503b11e4e829b7c56f8",
        "address": "0xf2feC13CDB46760E065DDC1DF9dA16Cb87AFD61f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f2fec13cdb46760e065ddc1df9da16cb87afd61f",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x24a3752be27e1f86253995b1aad190dd9a2e78337e16fe0481dc569c59661e91"
      },
      {
        "transactionIndex": 101,
        "blockNumber": 14276366,
        "transactionHash": "0x7bdb426a673cb5c8bd031fe7c4d63dbf78063832a7393503b11e4e829b7c56f8",
        "address": "0xf2feC13CDB46760E065DDC1DF9dA16Cb87AFD61f",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000f2fec13cdb46760e065ddc1df9da16cb87afd61f",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x24a3752be27e1f86253995b1aad190dd9a2e78337e16fe0481dc569c59661e91"
      }
    ],
    "blockNumber": 14276366,
    "cumulativeGasUsed": "11026296",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfd7C8060E57C5c78a582FA0DcD3d549db0a780F6",
    "0x4d03Fb78BdA67a04f1bD6fDE5024759D8Ce8D866",
    "0xcbb46b017e8d785C107e97c56135894b3eAD599C"
  ],
  "numDeployments": 1,
  "solcInputHash": "39727c19b206401a210da75cc1386159",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TOKEN_ADDR_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"GOVERNANCE_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"AUTHORITY_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum veAPHRA.DepositType\",\"name\":\"deposit_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"abstain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"attach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attachments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgeDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAtNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFTAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"block_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock_duration\",\"type\":\"uint256\"}],\"name\":\"create_lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"create_lock_for\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"detach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increase_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock_duration\",\"type\":\"uint256\"}],\"name\":\"increase_unlock_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"locked__end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownership_change\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newDescription\",\"type\":\"string\"}],\"name\":\"setBadgeDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"user_point_history__ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\",\"_tokenId\":\"ID of the token to be approved.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`.      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\",\"params\":{\"_owner\":\"Address for whom to query the balance.\"}},\"constructor\":{\"params\":{\"AUTHORITY_\":\"`Authority`  address\",\"GOVERNANCE_\":\"`GOVERNANCE`  address\",\"TOKEN_ADDR_\":\"`ERC20APHRA` token address\"}},\"create_lock(uint256,uint256)\":{\"params\":{\"_lock_duration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_value\":\"Amount to deposit\"}},\"create_lock_for(uint256,uint256,address)\":{\"params\":{\"_lock_duration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_to\":\"Address to deposit\",\"_value\":\"Amount to deposit\"}},\"deposit_for(uint256,uint256)\":{\"details\":\"Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user\",\"params\":{\"_tokenId\":\"lock NFT\",\"_value\":\"Amount to add to user's lock\"}},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\"}},\"get_last_user_slope(uint256)\":{\"params\":{\"_tokenId\":\"token of the NFT\"},\"returns\":{\"_0\":\"Value of the slope\"}},\"increase_amount(uint256,uint256)\":{\"params\":{\"_value\":\"Amount of tokens to deposit and add to the lock\"}},\"increase_unlock_time(uint256,uint256)\":{\"params\":{\"_lock_duration\":\"New number of seconds until tokens unlock\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\",\"_owner\":\"The address that owns the NFTs.\"}},\"locked__end(uint256)\":{\"params\":{\"_tokenId\":\"User NFT\"},\"returns\":{\"_0\":\"Epoch time of the lock end\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT.\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of      `msg.sender`'s assets. It also emits the ApprovalForAll event.      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\",\"_operator\":\"Address to add to the set of authorized operators.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"_interfaceID\":\"Id of the interface\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Get token by index\"},\"tokenURI(uint256)\":{\"details\":\"Returns current token URI metadata\",\"params\":{\"_tokenId\":\"Token ID to fetch URI for.\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"_block\":\"Block to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power at `_block`\"}},\"totalSupplyAtT(uint256)\":{\"details\":\"Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\",\"returns\":{\"_0\":\"Total voting power\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"user_point_history__ts(uint256,uint256)\":{\"params\":{\"_idx\":\"User epoch number\",\"_tokenId\":\"token of the NFT\"},\"returns\":{\"_0\":\"Epoch time of the checkpoint\"}},\"withdraw(uint256)\":{\"details\":\"Only possible if the lock has expired\"}},\"stateVariables\":{\"ERC165_INTERFACE_ID\":{\"details\":\"ERC165 interface ID of ERC165\"},\"ERC721_INTERFACE_ID\":{\"details\":\"ERC165 interface ID of ERC721\"},\"ERC721_METADATA_INTERFACE_ID\":{\"details\":\"ERC165 interface ID of ERC721Metadata\"},\"_not_entered\":{\"details\":\"reentrancy guard\"},\"idToApprovals\":{\"details\":\"Mapping from NFT ID to approved address.\"},\"idToOwner\":{\"details\":\"Mapping from NFT ID to the address that owns it.\"},\"name\":{\"details\":\"Returns the token collection name.\"},\"ownerToNFTokenCount\":{\"details\":\"Mapping from owner address to count of his tokens.\"},\"ownerToNFTokenIdList\":{\"details\":\"Mapping from owner address to mapping of index to tokenIds\"},\"ownerToOperators\":{\"details\":\"Mapping from owner address to mapping of operator addresses.\"},\"supportedInterfaces\":{\"details\":\"Mapping of interface id to bool about whether or not it's supported\"},\"symbol\":{\"details\":\"Returns the token collection symbol.\"},\"tokenId\":{\"details\":\"Current count of token\"},\"tokenToOwnerIndex\":{\"details\":\"Mapping from NFT ID to index of owner\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkpoint()\":{\"notice\":\"Record global data to checkpoint\"},\"constructor\":{\"notice\":\"Contract constructor\"},\"create_lock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\"},\"create_lock_for(uint256,uint256,address)\":{\"notice\":\"Deposit `_value` tokens for `_to` and lock for `_lock_duration`\"},\"deposit_for(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `_tokenId` and add to the lock\"},\"get_last_user_slope(uint256)\":{\"notice\":\"Get the most recently recorded rate of voting power decrease for `_tokenId`\"},\"increase_amount(uint256,uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\"},\"increase_unlock_time(uint256,uint256)\":{\"notice\":\"Extend the unlock time for `_tokenId`\"},\"locked__end(uint256)\":{\"notice\":\"Get timestamp when `_tokenId`'s lock finishes\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at some point in the past\"},\"totalSupplyAtT(uint256)\":{\"notice\":\"Calculate total voting power\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else        they maybe be permanently lost.\"},\"user_point_history__ts(uint256,uint256)\":{\"notice\":\"Get the timestamp for checkpoint `_idx` for `_tokenId`\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw all tokens for `_tokenId`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"srcBuild/veAPHRA.sol\":\"veAPHRA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n        emit AuthorityUpdated(msg.sender, _authority);\\n    }\\n\\n    modifier requiresAuth() {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x45a3dedcffe229eb4393a1ac5233da3d332cddae4cf97fc44602614329c1f70a\",\"license\":\"AGPL-3.0-only\"},\"srcBuild/veAPHRA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport {Auth, Authority} from \\\"@rari-capital/solmate/src/auth/Auth.sol\\\";\\n\\n/**\\n@title Voting Escrow\\n@author Curve Finance\\n@license MIT\\n@notice Votes have a weight depending on time, so that users are\\ncommitted to the future of (whatever they are voting for)\\n@dev Vote weight decays linearly over time. Lock time cannot be\\nmore than `MAXTIME` (4 years).\\n\\n# Voting escrow to have time-weighted votes\\n# Votes have a weight depending on time, so that users are committed\\n# to the future of (whatever they are voting for).\\n# The weight in this implementation is linear, and lock cannot be more than maxtime:\\n# w ^\\n# 1 +        /\\n#   |      /\\n#   |    /\\n#   |  /\\n#   |/\\n# 0 +--------+------> time\\n#       maxtime (4 years?)\\n*/\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\\n/**\\n* @dev Interface of the ERC165 standard, as defined in the\\n* https://eips.ethereum.org/EIPS/eip-165[EIP].\\n*\\n* Implementers can declare support of contract interfaces, which can then be\\n* queried by others ({ERC165Checker}).\\n*\\n* For an implementation, see {ERC165}.\\n*/\\ninterface IERC165 {\\n    /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n* @dev Required interface of an ERC721 compliant contract.\\n*/\\ninterface IERC721 is IERC165 {\\n    /**\\n    * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n    */\\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\\n\\n    /**\\n    * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n    */\\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\\n\\n    /**\\n    * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n    */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n    * @dev Returns the number of tokens in ``owner``'s account.\\n    */\\n    function balanceOf(address owner) external view returns (uint balance);\\n\\n    /**\\n    * @dev Returns the owner of the `tokenId` token.\\n    *\\n    * Requirements:\\n    *\\n    * - `tokenId` must exist.\\n    */\\n    function ownerOf(uint tokenId) external view returns (address owner);\\n\\n    /**\\n    * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n    * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n    *\\n    * Requirements:\\n    *\\n    * - `from` cannot be the zero address.\\n    * - `to` cannot be the zero address.\\n    * - `tokenId` token must exist and be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n    * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint tokenId\\n    ) external;\\n\\n    /**\\n    * @dev Transfers `tokenId` token from `from` to `to`.\\n    *\\n    * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n    *\\n    * Requirements:\\n    *\\n    * - `from` cannot be the zero address.\\n    * - `to` cannot be the zero address.\\n    * - `tokenId` token must be owned by `from`.\\n    * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint tokenId\\n    ) external;\\n\\n    /**\\n    * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n    * The approval is cleared when the token is transferred.\\n    *\\n    * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n    *\\n    * Requirements:\\n    *\\n    * - The caller must own the token or be an approved operator.\\n    * - `tokenId` must exist.\\n    *\\n    * Emits an {Approval} event.\\n    */\\n    function approve(address to, uint tokenId) external;\\n\\n    /**\\n    * @dev Returns the account approved for `tokenId` token.\\n    *\\n    * Requirements:\\n    *\\n    * - `tokenId` must exist.\\n    */\\n    function getApproved(uint tokenId) external view returns (address operator);\\n\\n    /**\\n    * @dev Approve or remove `operator` as an operator for the caller.\\n    * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n    *\\n    * Requirements:\\n    *\\n    * - The `operator` cannot be the caller.\\n    *\\n    * Emits an {ApprovalForAll} event.\\n    */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n    * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n    *\\n    * See {setApprovalForAll}\\n    */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n    * @dev Safely transfers `tokenId` token from `from` to `to`.\\n    *\\n    * Requirements:\\n    *\\n    * - `from` cannot be the zero address.\\n    * - `to` cannot be the zero address.\\n    * - `tokenId` token must exist and be owned by `from`.\\n    * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n    * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n* @title ERC721 token receiver interface\\n* @dev Interface for any contract that wants to support safeTransfers\\n* from ERC721 asset contracts.\\n*/\\ninterface IERC721Receiver {\\n    /**\\n    * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n    * by `operator` from `from`, this function is called.\\n    *\\n    * It must return its Solidity selector to confirm the token transfer.\\n    * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n    *\\n    * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n    */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n* @dev See https://eips.ethereum.org/EIPS/eip-721\\n*/\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n    * @dev Returns the token collection name.\\n    */\\n    function name() external view returns (string memory);\\n\\n    /**\\n    * @dev Returns the token collection symbol.\\n    */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n    * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n    */\\n    function tokenURI(uint tokenId) external view returns (string memory);\\n}\\n\\n/**\\n* @dev Interface of the ERC20 standard as defined in the EIP.\\n*/\\ninterface IERC20 {\\n    /**\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    /**\\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n    * allowance mechanism. `amount` is then deducted from the caller's\\n    * allowance.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n}\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n/* We cannot really do block numbers per se b/c slope is per time, not per block\\n* and per block could be fairly bad b/c Ethereum changes blocktimes.\\n* What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\ncontract veAPHRA is Auth, IERC721, IERC721Metadata {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint tokenId,\\n        uint value,\\n        uint indexed locktime,\\n        DepositType deposit_type,\\n        uint ts\\n    );\\n    event Withdraw(address indexed provider, uint tokenId, uint value, uint ts);\\n    event Supply(uint prevSupply, uint supply);\\n\\n    uint internal constant WEEK = 1 weeks;\\n    uint internal constant MAXTIME = 2 * 365 * 86400;\\n    int128 internal constant iMAXTIME = 2 * 365 * 86400;\\n    uint internal constant MULTIPLIER = 1 ether;\\n\\n    address immutable public token;\\n    uint public supply;\\n    mapping(uint => LockedBalance) public locked;\\n\\n    mapping(uint => uint) public ownership_change;\\n\\n    uint public epoch;\\n    mapping(uint => Point) public point_history; // epoch -> unsigned point\\n    mapping(uint => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\\n\\n    mapping(uint => uint) public user_point_epoch;\\n    mapping(uint => int128) public slope_changes; // time -> signed slope change\\n\\n    mapping(uint => uint) public attachments;\\n    mapping(uint => bool) public voted;\\n    address public voter;\\n\\n    string constant public name = \\\"veAPHRA\\\";\\n    string constant public symbol = \\\"veAPHRA\\\";\\n    string constant public version = \\\"1.0.0\\\";\\n    uint8 constant public decimals = 18;\\n\\n    string public badgeDescription;\\n    /// @dev Current count of token\\n    uint internal tokenId;\\n\\n    /// @dev Mapping from NFT ID to the address that owns it.\\n    mapping(uint => address) internal idToOwner;\\n\\n    /// @dev Mapping from NFT ID to approved address.\\n    mapping(uint => address) internal idToApprovals;\\n\\n    /// @dev Mapping from owner address to count of his tokens.\\n    mapping(address => uint) internal ownerToNFTokenCount;\\n\\n    /// @dev Mapping from owner address to mapping of index to tokenIds\\n    mapping(address => mapping(uint => uint)) internal ownerToNFTokenIdList;\\n\\n    /// @dev Mapping from NFT ID to index of owner\\n    mapping(uint => uint) internal tokenToOwnerIndex;\\n\\n    /// @dev Mapping from owner address to mapping of operator addresses.\\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\\n\\n    /// @dev Mapping of interface id to bool about whether or not it's supported\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\n\\n    /// @dev ERC165 interface ID of ERC165\\n    bytes4 internal constant ERC165_INTERFACE_ID = 0x01ffc9a7;\\n\\n    /// @dev ERC165 interface ID of ERC721\\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n\\n    /// @dev ERC165 interface ID of ERC721Metadata\\n    bytes4 internal constant ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\\n\\n    bool internal _unlocked;\\n    /// @dev reentrancy guard\\n    uint8 internal constant _not_entered = 1;\\n    uint8 internal constant _entered = 2;\\n    uint8 internal _entered_state = 1;\\n    modifier nonreentrant() {\\n        require(_entered_state == _not_entered);\\n        _entered_state = _entered;\\n        _;\\n        _entered_state = _not_entered;\\n    }\\n\\n    /// @notice Contract constructor\\n    /// @param TOKEN_ADDR_ `ERC20APHRA` token address\\n    /// @param GOVERNANCE_ `GOVERNANCE`  address\\n    /// @param AUTHORITY_ `Authority`  address\\n    constructor(\\n        address TOKEN_ADDR_,\\n        address GOVERNANCE_,\\n        address AUTHORITY_\\n    ) Auth(GOVERNANCE_, Authority(AUTHORITY_)) {\\n        token = TOKEN_ADDR_;\\n        voter = msg.sender;\\n        point_history[0].blk = block.number;\\n        point_history[0].ts = block.timestamp;\\n        _unlocked = false;\\n        supportedInterfaces[ERC165_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC721_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = true;\\n        badgeDescription = string(\\\"APHRA Badges, can be used to boost gauge yields, vote on new token emissions, receive protocol bribes and participate in governance\\\");\\n        // mint-ish\\n        emit Transfer(address(0), address(this), tokenId);\\n        // burn-ish\\n        emit Transfer(address(this), address(0), tokenId);\\n    }\\n\\n    function isUnlocked() public view returns (bool) {\\n        return _unlocked;\\n    }\\n\\n    function setBadgeDescription(string memory _newDescription) requiresAuth external {\\n        badgeDescription = _newDescription;\\n    }\\n\\n    //todo setup so that this is hard coded to be veGovernor\\n    function unlock() public requiresAuth {\\n        require(_unlocked == false, \\\"unlock already happened\\\");\\n        _unlocked = true;\\n    }\\n\\n    modifier unlocked() {\\n        require(_unlocked, \\\"contract must be unlocked\\\");\\n        _;\\n    }\\n\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param _interfaceID Id of the interface\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\\n        return supportedInterfaces[_interfaceID];\\n    }\\n\\n    /// @notice Get the most recently recorded rate of voting power decrease for `_tokenId`\\n    /// @param _tokenId token of the NFT\\n    /// @return Value of the slope\\n    function get_last_user_slope(uint _tokenId) external view returns (int128) {\\n        uint uepoch = user_point_epoch[_tokenId];\\n        return user_point_history[_tokenId][uepoch].slope;\\n    }\\n\\n    /// @notice Get the timestamp for checkpoint `_idx` for `_tokenId`\\n    /// @param _tokenId token of the NFT\\n    /// @param _idx User epoch number\\n    /// @return Epoch time of the checkpoint\\n    function user_point_history__ts(uint _tokenId, uint _idx) external view returns (uint) {\\n        return user_point_history[_tokenId][_idx].ts;\\n    }\\n\\n    /// @notice Get timestamp when `_tokenId`'s lock finishes\\n    /// @param _tokenId User NFT\\n    /// @return Epoch time of the lock end\\n    function locked__end(uint _tokenId) external view returns (uint) {\\n        return locked[_tokenId].end;\\n    }\\n\\n    /// @dev Returns the number of NFTs owned by `_owner`.\\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n    /// @param _owner Address for whom to query the balance.\\n    function _balance(address _owner) internal view returns (uint) {\\n        return ownerToNFTokenCount[_owner];\\n    }\\n\\n    /// @dev Returns the number of NFTs owned by `_owner`.\\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\\n    /// @param _owner Address for whom to query the balance.\\n    function balanceOf(address _owner) external view returns (uint) {\\n        return _balance(_owner);\\n    }\\n\\n    /// @dev Returns the address of the owner of the NFT.\\n    /// @param _tokenId The identifier for an NFT.\\n    function ownerOf(uint _tokenId) public view returns (address) {\\n        return idToOwner[_tokenId];\\n    }\\n\\n    /// @dev Get the approved address for a single NFT.\\n    /// @param _tokenId ID of the NFT to query the approval of.\\n    function getApproved(uint _tokenId) external view returns (address) {\\n        return idToApprovals[_tokenId];\\n    }\\n\\n    /// @dev Checks if `_operator` is an approved operator for `_owner`.\\n    /// @param _owner The address that owns the NFTs.\\n    /// @param _operator The address that acts on behalf of the owner.\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\\n        return (ownerToOperators[_owner])[_operator];\\n    }\\n\\n    /// @dev  Get token by index\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint) {\\n        return ownerToNFTokenIdList[_owner][_tokenIndex];\\n    }\\n\\n    /// @dev Returns whether the given spender can transfer a given token ID\\n    /// @param _spender address of the spender to query\\n    /// @param _tokenId uint ID of the token to be transferred\\n    /// @return bool whether the msg.sender is approved for the given token ID, is an operator of the owner, or is the owner of the token\\n    function _isApprovedOrOwner(address _spender, uint _tokenId) internal view returns (bool) {\\n        address owner = idToOwner[_tokenId];\\n        bool spenderIsOwner = owner == _spender;\\n        bool spenderIsApproved = _spender == idToApprovals[_tokenId];\\n        bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\\n        return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\\n    }\\n\\n    function isApprovedOrOwner(address _spender, uint _tokenId) external view returns (bool) {\\n        return _isApprovedOrOwner(_spender, _tokenId);\\n    }\\n\\n    /// @dev Add a NFT to an index mapping to a given address\\n    /// @param _to address of the receiver\\n    /// @param _tokenId uint ID Of the token to be added\\n    function _addTokenToOwnerList(address _to, uint _tokenId) internal {\\n        uint current_count = _balance(_to);\\n\\n        ownerToNFTokenIdList[_to][current_count] = _tokenId;\\n        tokenToOwnerIndex[_tokenId] = current_count;\\n    }\\n\\n    /// @dev Remove a NFT from an index mapping to a given address\\n    /// @param _from address of the sender\\n    /// @param _tokenId uint ID Of the token to be removed\\n    function _removeTokenFromOwnerList(address _from, uint _tokenId) internal {\\n        // Delete\\n        uint current_count = _balance(_from) - 1;\\n        uint current_index = tokenToOwnerIndex[_tokenId];\\n\\n        if (current_count == current_index) {\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][current_count] = 0;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[_tokenId] = 0;\\n        } else {\\n            uint lastTokenId = ownerToNFTokenIdList[_from][current_count];\\n\\n            // Add\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][current_index] = lastTokenId;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[lastTokenId] = current_index;\\n\\n            // Delete\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][current_count] = 0;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[_tokenId] = 0;\\n        }\\n    }\\n\\n    /// @dev Add a NFT to a given address\\n    ///      Throws if `_tokenId` is owned by someone.\\n    function _addTokenTo(address _to, uint _tokenId) internal {\\n        // Throws if `_tokenId` is owned by someone\\n        assert(idToOwner[_tokenId] == address(0));\\n        // Change the owner\\n        idToOwner[_tokenId] = _to;\\n        // Update owner token index tracking\\n        _addTokenToOwnerList(_to, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_to] += 1;\\n    }\\n\\n    /// @dev Remove a NFT from a given address\\n    ///      Throws if `_from` is not the current owner.\\n    function _removeTokenFrom(address _from, uint _tokenId) internal {\\n        // Throws if `_from` is not the current owner\\n        assert(idToOwner[_tokenId] == _from);\\n        // Change the owner\\n        idToOwner[_tokenId] = address(0);\\n        // Update owner token index tracking\\n        _removeTokenFromOwnerList(_from, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_from] -= 1;\\n    }\\n\\n    /// @dev Clear an approval of a given address\\n    ///      Throws if `_owner` is not the current owner.\\n    function _clearApproval(address _owner, uint _tokenId) internal {\\n        // Throws if `_owner` is not the current owner\\n        assert(idToOwner[_tokenId] == _owner);\\n        if (idToApprovals[_tokenId] != address(0)) {\\n            // Reset approvals\\n            idToApprovals[_tokenId] = address(0);\\n        }\\n    }\\n\\n    /// @dev Exeute transfer of a NFT.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n    ///      address for this NFT. (NOTE: `msg.sender` not allowed in internal function so pass `_sender`.)\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    function _transferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId,\\n        address _sender\\n    ) internal {\\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \\\"attached\\\");\\n        // Check requirements\\n        require(_isApprovedOrOwner(_sender, _tokenId));\\n        // Clear approval. Throws if `_from` is not the current owner\\n        _clearApproval(_from, _tokenId);\\n        // Remove NFT. Throws if `_tokenId` is not a valid NFT\\n        _removeTokenFrom(_from, _tokenId);\\n        // Add NFT\\n        _addTokenTo(_to, _tokenId);\\n        // Set the block of ownership transfer (for Flash NFT protection)\\n        ownership_change[_tokenId] = block.number;\\n        // Log the transfer\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /* TRANSFER FUNCTIONS */\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    /// @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n    ///        they maybe be permanently lost.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId\\n    ) unlocked external {\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n        uint size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /// @dev Transfers the ownership of an NFT from one address to another address.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n    ///      approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n    ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    /// @param _data Additional data with no specified format, sent in call to `_to`.\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId,\\n        bytes memory _data\\n    ) unlocked public {\\n        _transferFrom(_from, _to, _tokenId, msg.sender);\\n\\n        if (_isContract(_to)) {\\n            // Throws if transfer destination is a contract which does not implement 'onERC721Received'\\n            try IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4) {} catch (\\n                bytes memory reason\\n            ) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers the ownership of an NFT from one address to another address.\\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n    ///      approved address for this NFT.\\n    ///      Throws if `_from` is not the current owner.\\n    ///      Throws if `_to` is the zero address.\\n    ///      Throws if `_tokenId` is not a valid NFT.\\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\\n    ///      the return value is not `bytes4(keccak256(\\\"onERC721Received(address,address,uint,bytes)\\\"))`.\\n    /// @param _from The current owner of the NFT.\\n    /// @param _to The new owner.\\n    /// @param _tokenId The NFT to transfer.\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId\\n    ) unlocked external {\\n        safeTransferFrom(_from, _to, _tokenId, '');\\n    }\\n\\n    /// @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\\n    ///      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\\n    ///      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\\n    /// @param _approved Address to be approved for the given NFT ID.\\n    /// @param _tokenId ID of the token to be approved.\\n    function approve(address _approved, uint _tokenId) unlocked public {\\n        address owner = idToOwner[_tokenId];\\n        // Throws if `_tokenId` is not a valid NFT\\n        require(owner != address(0));\\n        // Throws if `_approved` is the current owner\\n        require(_approved != owner);\\n        // Check requirements\\n        bool senderIsOwner = (idToOwner[_tokenId] == msg.sender);\\n        bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\\n        require(senderIsOwner || senderIsApprovedForAll);\\n        // Set the approval\\n        idToApprovals[_tokenId] = _approved;\\n        emit Approval(owner, _approved, _tokenId);\\n    }\\n\\n    /// @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n    ///      `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n    ///      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\\n    /// @notice This works even if sender doesn't own any tokens at the time.\\n    /// @param _operator Address to add to the set of authorized operators.\\n    /// @param _approved True if the operators is approved, false to revoke approval.\\n    function setApprovalForAll(address _operator, bool _approved) unlocked external {\\n        // Throws if `_operator` is the `msg.sender`\\n        assert(_operator != msg.sender);\\n        ownerToOperators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /// @dev Function to mint tokens\\n    ///      Throws if `_to` is zero address.\\n    ///      Throws if `_tokenId` is owned by someone.\\n    /// @param _to The address that will receive the minted tokens.\\n    /// @param _tokenId The token id to mint.\\n    /// @return A boolean that indicates if the operation was successful.\\n    function _mint(address _to, uint _tokenId) internal returns (bool) {\\n        // Throws if `_to` is zero address\\n        assert(_to != address(0));\\n        // Add NFT. Throws if `_tokenId` is owned by someone\\n        _addTokenTo(_to, _tokenId);\\n        emit Transfer(address(0), _to, _tokenId);\\n        return true;\\n    }\\n\\n    /// @notice Record global and per-user data to checkpoint\\n    /// @param _tokenId NFT token ID. No user checkpoint if 0\\n    /// @param old_locked Pevious locked amount / end lock time for the user\\n    /// @param new_locked New locked amount / end lock time for the user\\n    function _checkpoint(\\n        uint _tokenId,\\n        LockedBalance memory old_locked,\\n        LockedBalance memory new_locked\\n    ) internal {\\n        Point memory u_old;\\n        Point memory u_new;\\n        int128 old_dslope = 0;\\n        int128 new_dslope = 0;\\n        uint _epoch = epoch;\\n\\n        if (_tokenId != 0) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (old_locked.end > block.timestamp && old_locked.amount > 0) {\\n                u_old.slope = old_locked.amount / iMAXTIME;\\n                u_old.bias = u_old.slope * int128(int256(old_locked.end - block.timestamp));\\n            }\\n            if (new_locked.end > block.timestamp && new_locked.amount > 0) {\\n                u_new.slope = new_locked.amount / iMAXTIME;\\n                u_new.bias = u_new.slope * int128(int256(new_locked.end - block.timestamp));\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // old_locked.end can be in the past and in the future\\n            // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            old_dslope = slope_changes[old_locked.end];\\n            if (new_locked.end != 0) {\\n                if (new_locked.end == old_locked.end) {\\n                    new_dslope = old_dslope;\\n                } else {\\n                    new_dslope = slope_changes[new_locked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory last_point = Point({bias : 0, slope : 0, ts : block.timestamp, blk : block.number});\\n        if (_epoch > 0) {\\n            last_point = point_history[_epoch];\\n        }\\n        uint last_checkpoint = last_point.ts;\\n        // initial_last_point is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory initial_last_point = last_point;\\n        uint block_slope = 0;\\n        // dblock/dt\\n        if (block.timestamp > last_point.ts) {\\n            block_slope = (MULTIPLIER * (block.number - last_point.blk)) / (block.timestamp - last_point.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        {\\n            uint t_i = (last_checkpoint / WEEK) * WEEK;\\n            for (uint i = 0; i < 255; ++i) {\\n                // Hopefully it won't happen that this won't get used in 5 years!\\n                // If it does, users will be able to withdraw but vote weight will be broken\\n                t_i += WEEK;\\n                int128 d_slope = 0;\\n                if (t_i > block.timestamp) {\\n                    t_i = block.timestamp;\\n                } else {\\n                    d_slope = slope_changes[t_i];\\n                }\\n                last_point.bias -= last_point.slope * int128(int256(t_i - last_checkpoint));\\n                last_point.slope += d_slope;\\n                if (last_point.bias < 0) {\\n                    // This can happen\\n                    last_point.bias = 0;\\n                }\\n                if (last_point.slope < 0) {\\n                    // This cannot happen - just in case\\n                    last_point.slope = 0;\\n                }\\n                last_checkpoint = t_i;\\n                last_point.ts = t_i;\\n                last_point.blk = initial_last_point.blk + (block_slope * (t_i - initial_last_point.ts)) / MULTIPLIER;\\n                _epoch += 1;\\n                if (t_i == block.timestamp) {\\n                    last_point.blk = block.number;\\n                    break;\\n                } else {\\n                    point_history[_epoch] = last_point;\\n                }\\n            }\\n        }\\n\\n        epoch = _epoch;\\n        // Now point_history is filled until t=now\\n\\n        if (_tokenId != 0) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            last_point.slope += (u_new.slope - u_old.slope);\\n            last_point.bias += (u_new.bias - u_old.bias);\\n            if (last_point.slope < 0) {\\n                last_point.slope = 0;\\n            }\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n        }\\n\\n        // Record the changed point into history\\n        point_history[_epoch] = last_point;\\n\\n        if (_tokenId != 0) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [new_locked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if (old_locked.end > block.timestamp) {\\n                // old_dslope was <something> - u_old.slope, so we cancel that\\n                old_dslope += u_old.slope;\\n                if (new_locked.end == old_locked.end) {\\n                    old_dslope -= u_new.slope;\\n                    // It was a new deposit, not extension\\n                }\\n                slope_changes[old_locked.end] = old_dslope;\\n            }\\n\\n            if (new_locked.end > block.timestamp) {\\n                if (new_locked.end > old_locked.end) {\\n                    new_dslope -= u_new.slope;\\n                    // old slope disappeared at this point\\n                    slope_changes[new_locked.end] = new_dslope;\\n                }\\n                // else: we recorded it already in old_dslope\\n            }\\n            // Now handle user history\\n            uint user_epoch = user_point_epoch[_tokenId] + 1;\\n\\n            user_point_epoch[_tokenId] = user_epoch;\\n            u_new.ts = block.timestamp;\\n            u_new.blk = block.number;\\n            user_point_history[_tokenId][user_epoch] = u_new;\\n        }\\n    }\\n\\n    /// @notice Deposit and lock tokens for a user\\n    /// @param _tokenId NFT that holds lock\\n    /// @param _value Amount to deposit\\n    /// @param unlock_time New time when to unlock the tokens, or 0 if unchanged\\n    /// @param locked_balance Previous locked amount / timestamp\\n    /// @param deposit_type The type of deposit\\n    function _deposit_for(\\n        uint _tokenId,\\n        uint _value,\\n        uint unlock_time,\\n        LockedBalance memory locked_balance,\\n        DepositType deposit_type\\n    ) internal {\\n        LockedBalance memory _locked = locked_balance;\\n        uint supply_before = supply;\\n\\n        supply = supply_before + _value;\\n        LockedBalance memory old_locked;\\n        (old_locked.amount, old_locked.end) = (_locked.amount, _locked.end);\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount += int128(int256(_value));\\n        if (unlock_time != 0) {\\n            _locked.end = unlock_time;\\n        }\\n        locked[_tokenId] = _locked;\\n\\n        // Possibilities:\\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n        _checkpoint(_tokenId, old_locked, _locked);\\n\\n        address from = msg.sender;\\n        if (_value != 0 && deposit_type != DepositType.MERGE_TYPE) {\\n            assert(IERC20(token).transferFrom(from, address(this), _value));\\n        }\\n\\n        emit Deposit(from, _tokenId, _value, _locked.end, deposit_type, block.timestamp);\\n        emit Supply(supply_before, supply_before + _value);\\n    }\\n\\n    function setVoter(address _voter) external {\\n        require(msg.sender == voter);\\n        voter = _voter;\\n    }\\n\\n    function voting(uint _tokenId) external {\\n        require(msg.sender == voter);\\n        voted[_tokenId] = true;\\n    }\\n\\n    function abstain(uint _tokenId) external {\\n        require(msg.sender == voter);\\n        voted[_tokenId] = false;\\n    }\\n\\n    function attach(uint _tokenId) external {\\n        require(msg.sender == voter);\\n        attachments[_tokenId] = attachments[_tokenId] + 1;\\n    }\\n\\n    function detach(uint _tokenId) external {\\n        require(msg.sender == voter);\\n        attachments[_tokenId] = attachments[_tokenId] - 1;\\n    }\\n\\n    function merge(uint _from, uint _to) unlocked external {\\n        require(attachments[_from] == 0 && !voted[_from], \\\"attached\\\");\\n        require(_from != _to);\\n        require(_isApprovedOrOwner(msg.sender, _from));\\n        require(_isApprovedOrOwner(msg.sender, _to));\\n\\n        LockedBalance memory _locked0 = locked[_from];\\n        LockedBalance memory _locked1 = locked[_to];\\n        uint value0 = uint(int256(_locked0.amount));\\n        uint end = _locked0.end >= _locked1.end ? _locked0.end : _locked1.end;\\n\\n        locked[_from] = LockedBalance(0, 0);\\n        _checkpoint(_from, _locked0, LockedBalance(0, 0));\\n        _burn(_from);\\n        _deposit_for(_to, value0, end, _locked1, DepositType.MERGE_TYPE);\\n    }\\n\\n    function block_number() external view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external {\\n        _checkpoint(0, LockedBalance(0, 0), LockedBalance(0, 0));\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    ///      cannot extend their locktime and deposit for a brand new user\\n    /// @param _tokenId lock NFT\\n    /// @param _value Amount to add to user's lock\\n    function deposit_for(uint _tokenId, uint _value) external nonreentrant {\\n        LockedBalance memory _locked = locked[_tokenId];\\n\\n        require(_value > 0);\\n        // dev: need non-zero value\\n        require(_locked.amount > 0 || !isUnlocked(), 'No existing lock found');\\n        require(_locked.end > block.timestamp, 'Cannot add to expired lock. Withdraw');\\n        _deposit_for(_tokenId, _value, 0, _locked, DepositType.DEPOSIT_FOR_TYPE);\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\\n    /// @param _value Amount to deposit\\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    function _create_lock(uint _value, uint _lock_duration, address _to) internal returns (uint) {\\n        uint unlock_time = (block.timestamp + _lock_duration) / WEEK * WEEK;\\n        // Locktime is rounded down to weeks\\n\\n        require(_value > 0 || !isUnlocked());\\n        // dev: need non-zero value\\n        require(unlock_time > block.timestamp, 'Can only lock until time in the future');\\n        require(unlock_time <= block.timestamp + MAXTIME, 'Voting lock can be 2 years max');\\n\\n        ++tokenId;\\n        uint _tokenId = tokenId;\\n        _mint(_to, _tokenId);\\n\\n        _deposit_for(_tokenId, _value, unlock_time, locked[_tokenId], DepositType.CREATE_LOCK_TYPE);\\n        return _tokenId;\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\\n    /// @param _value Amount to deposit\\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external nonreentrant returns (uint) {\\n        return _create_lock(_value, _lock_duration, _to);\\n    }\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\\n    /// @param _value Amount to deposit\\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\\n    function create_lock(uint _value, uint _lock_duration) external nonreentrant returns (uint) {\\n        return _create_lock(_value, _lock_duration, msg.sender);\\n    }\\n\\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increase_amount(uint _tokenId, uint _value) external nonreentrant {\\n        assert(_isApprovedOrOwner(msg.sender, _tokenId));\\n\\n        LockedBalance memory _locked = locked[_tokenId];\\n\\n        assert(_value > 0 || !isUnlocked());\\n        // dev: need non-zero value\\n        require(_locked.amount > 0 || !isUnlocked(), 'No existing lock found');\\n        require(_locked.end > block.timestamp, 'Cannot add to expired lock. Withdraw');\\n\\n        _deposit_for(_tokenId, _value, 0, _locked, DepositType.INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    /// @notice Extend the unlock time for `_tokenId`\\n    /// @param _lock_duration New number of seconds until tokens unlock\\n    function increase_unlock_time(uint _tokenId, uint _lock_duration) external nonreentrant {\\n        assert(_isApprovedOrOwner(msg.sender, _tokenId));\\n\\n        LockedBalance memory _locked = locked[_tokenId];\\n        uint unlock_time = (block.timestamp + _lock_duration) / WEEK * WEEK;\\n        // Locktime is rounded down to weeks\\n\\n        require(_locked.end > block.timestamp, 'Lock expired');\\n        require(_locked.amount > 0, 'Nothing is locked');\\n        require(unlock_time > _locked.end, 'Can only increase lock duration');\\n        require(unlock_time <= block.timestamp + MAXTIME, 'Voting lock can be 4 years max');\\n\\n        _deposit_for(_tokenId, 0, unlock_time, _locked, DepositType.INCREASE_UNLOCK_TIME);\\n    }\\n\\n    /// @notice Withdraw all tokens for `_tokenId`\\n    /// @dev Only possible if the lock has expired\\n    function withdraw(uint _tokenId) unlocked external nonreentrant {\\n        assert(_isApprovedOrOwner(msg.sender, _tokenId));\\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \\\"attached\\\");\\n\\n        LockedBalance memory _locked = locked[_tokenId];\\n        require(block.timestamp >= _locked.end, \\\"The lock didn't expire\\\");\\n        uint value = uint(int256(_locked.amount));\\n\\n        locked[_tokenId] = LockedBalance(0, 0);\\n        uint supply_before = supply;\\n        supply = supply_before - value;\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(_tokenId, _locked, LockedBalance(0, 0));\\n\\n        assert(IERC20(token).transfer(msg.sender, value));\\n\\n        // Burn the NFT\\n        _burn(_tokenId);\\n\\n        emit Withdraw(msg.sender, _tokenId, value, block.timestamp);\\n        emit Supply(supply_before, supply_before - value);\\n    }\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    /// @notice Binary search to estimate timestamp for block number\\n    /// @param _block Block to find\\n    /// @param max_epoch Don't go beyond this epoch\\n    /// @return Approximate timestamp for block\\n    function _find_block_epoch(uint _block, uint max_epoch) internal view returns (uint) {\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = max_epoch;\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (point_history[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /// @notice Get the current voting power for `_tokenId`\\n    /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n    /// @param _tokenId NFT for lock\\n    /// @param _t Epoch time to return voting power at\\n    /// @return User voting power\\n    function _balanceOfNFT(uint _tokenId, uint _t) internal view returns (uint) {\\n        uint _epoch = user_point_epoch[_tokenId];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory last_point = user_point_history[_tokenId][_epoch];\\n            last_point.bias -= last_point.slope * int128(int256(_t) - int256(last_point.ts));\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n            return uint(int256(last_point.bias));\\n        }\\n    }\\n\\n    /// @dev Returns current token URI metadata\\n    /// @param _tokenId Token ID to fetch URI for.\\n    function tokenURI(uint _tokenId) external view returns (string memory) {\\n        require(idToOwner[_tokenId] != address(0), \\\"Query for nonexistent token\\\");\\n        LockedBalance memory _locked = locked[_tokenId];\\n        return\\n        _tokenURI(\\n            _tokenId,\\n            _balanceOfNFT(_tokenId, block.timestamp),\\n            _locked.end,\\n            uint(int256(_locked.amount)),\\n            badgeDescription\\n        );\\n    }\\n\\n    function balanceOfNFT(uint _tokenId) external view returns (uint) {\\n        if (ownership_change[_tokenId] == block.number) return 0;\\n        return _balanceOfNFT(_tokenId, block.timestamp);\\n    }\\n\\n    function balanceOfNFTAt(uint _tokenId, uint _t) external view returns (uint) {\\n        return _balanceOfNFT(_tokenId, _t);\\n    }\\n\\n    /// @notice Measure voting power of `_tokenId` at block height `_block`\\n    /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n    /// @param _tokenId User's wallet NFT\\n    /// @param _block Block to calculate the voting power at\\n    /// @return Voting power\\n    function _balanceOfAtNFT(uint _tokenId, uint _block) internal view returns (uint) {\\n        // Copying and pasting totalSupply code because Vyper cannot pass by\\n        // reference yet\\n        assert(_block <= block.number);\\n\\n        // Binary search\\n        uint _min = 0;\\n        uint _max = user_point_epoch[_tokenId];\\n        for (uint i = 0; i < 128; ++i) {\\n            // Will be always enough for 128-bit numbers\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint _mid = (_min + _max + 1) / 2;\\n            if (user_point_history[_tokenId][_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        Point memory upoint = user_point_history[_tokenId][_min];\\n\\n        uint max_epoch = epoch;\\n        uint _epoch = _find_block_epoch(_block, max_epoch);\\n        Point memory point_0 = point_history[_epoch];\\n        uint d_block = 0;\\n        uint d_t = 0;\\n        if (_epoch < max_epoch) {\\n            Point memory point_1 = point_history[_epoch + 1];\\n            d_block = point_1.blk - point_0.blk;\\n            d_t = point_1.ts - point_0.ts;\\n        } else {\\n            d_block = block.number - point_0.blk;\\n            d_t = block.timestamp - point_0.ts;\\n        }\\n        uint block_time = point_0.ts;\\n        if (d_block != 0) {\\n            block_time += (d_t * (_block - point_0.blk)) / d_block;\\n        }\\n\\n        upoint.bias -= upoint.slope * int128(int256(block_time - upoint.ts));\\n        if (upoint.bias >= 0) {\\n            return uint(uint128(upoint.bias));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function balanceOfAtNFT(uint _tokenId, uint _block) external view returns (uint) {\\n        return _balanceOfAtNFT(_tokenId, _block);\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param point The point (bias/slope) to start search from\\n    /// @param t Time to calculate the total voting power at\\n    /// @return Total voting power at that time\\n    function _supply_at(Point memory point, uint t) internal view returns (uint) {\\n        Point memory last_point = point;\\n        uint t_i = (last_point.ts / WEEK) * WEEK;\\n        for (uint i = 0; i < 255; ++i) {\\n            t_i += WEEK;\\n            int128 d_slope = 0;\\n            if (t_i > t) {\\n                t_i = t;\\n            } else {\\n                d_slope = slope_changes[t_i];\\n            }\\n            last_point.bias -= last_point.slope * int128(int256(t_i - last_point.ts));\\n            if (t_i == t) {\\n                break;\\n            }\\n            last_point.slope += d_slope;\\n            last_point.ts = t_i;\\n        }\\n\\n        if (last_point.bias < 0) {\\n            last_point.bias = 0;\\n        }\\n        return uint(uint128(last_point.bias));\\n    }\\n\\n    /// @notice Calculate total voting power\\n    /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n    /// @return Total voting power\\n    function totalSupplyAtT(uint t) public view returns (uint) {\\n        uint _epoch = epoch;\\n        Point memory last_point = point_history[_epoch];\\n        return _supply_at(last_point, t);\\n    }\\n\\n    function totalSupply() external view returns (uint) {\\n        return totalSupplyAtT(block.timestamp);\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param _block Block to calculate the total voting power at\\n    /// @return Total voting power at `_block`\\n    function totalSupplyAt(uint _block) external view returns (uint) {\\n        assert(_block <= block.number);\\n        uint _epoch = epoch;\\n        uint target_epoch = _find_block_epoch(_block, _epoch);\\n\\n        Point memory point = point_history[target_epoch];\\n        uint dt = 0;\\n        if (target_epoch < _epoch) {\\n            Point memory point_next = point_history[target_epoch + 1];\\n            if (point.blk != point_next.blk) {\\n                dt = ((_block - point.blk) * (point_next.ts - point.ts)) / (point_next.blk - point.blk);\\n            }\\n        } else {\\n            if (point.blk != block.number) {\\n                dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n        return _supply_at(point, point.ts + dt);\\n    }\\n\\n    function _tokenURI(uint _tokenId, uint _balanceOf, uint _locked_end, uint _value, string memory description) internal pure returns (string memory output) {\\n        output = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n        output = string(abi.encodePacked(output, \\\"token \\\", toString(_tokenId), '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">'));\\n        output = string(abi.encodePacked(output, \\\"balanceOf \\\", toString(_balanceOf), '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">'));\\n        output = string(abi.encodePacked(output, \\\"locked_end \\\", toString(_locked_end), '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">'));\\n        output = string(abi.encodePacked(output, \\\"value \\\", toString(_value), '</text></svg>'));\\n\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Badge #', toString(_tokenId), '\\\", \\\"description\\\": \\\"', description, '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n    }\\n\\n    function toString(uint value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint temp = value;\\n        uint digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function _burn(uint _tokenId) internal {\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"caller is not owner nor approved\\\");\\n\\n        address owner = ownerOf(_tokenId);\\n\\n        // Clear approval\\n        approve(address(0), _tokenId);\\n        // Remove token\\n        _removeTokenFrom(msg.sender, _tokenId);\\n        emit Transfer(owner, address(0), _tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x12a5ace9b76f460469fa0545122f21d9c6f0ff9a6004375feb11f23d83202475\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103a45760003560e01c80638c2c9baf116101e9578063c2c4c5c11161010f578063e441135c116100ad578063f8a057631161007c578063f8a0576314610952578063fbd3a29d14610975578063fc0c546a14610988578063fd4a77f1146109af57600080fd5b8063e441135c146108d0578063e7e242d4146108f0578063e985e9c514610903578063ee99fe281461093f57600080fd5b8063d1c2babb116100e9578063d1c2babb14610859578063d1febfb91461086c578063d4e54c3b146108aa578063e0514aba146108bd57600080fd5b8063c2c4c5c11461082b578063c87b56dd14610833578063ccd1fe881461084657600080fd5b8063a183af5211610187578063b45a3c0e11610156578063b45a3c0e146107aa578063b88d4fde146107f2578063bf7e214f14610805578063c1f0fb9f1461081857600080fd5b8063a183af5214610769578063a22cb4651461077c578063a4d855df1461078f578063a69df4b5146107a257600080fd5b8063900cf0cf116101c3578063900cf0cf1461073a57806395d89b4114610402578063981b24d014610743578063986b7d8a1461075657600080fd5b80638c2c9baf146106f15780638da5cb5b146107045780638fbb38ff1461071757600080fd5b806342842e0e116102ce5780636352211e1161026c5780637116c60c1161023b5780637116c60c1461069d57806371197484146106b05780637a9e5e4b146106d35780638380edb7146106e657600080fd5b80636352211e1461062e57806365fc3873146106575780636f5488371461066a57806370a082311461068a57600080fd5b806346c96aac116102a857806346c96aac146105dc5780634bc2a657146105ef57806354fd4d50146106025780636347486a1461062657600080fd5b806342842e0e14610590578063430c2081146105a3578063461f711c146105b657600080fd5b806313af40351161034657806325a58b561161031557806325a58b56146105275780632e1a7d4d1461052d5780632f745c5914610540578063313ce5671461057657600080fd5b806313af4035146104e657806318160ddd146104f95780631c984bc31461050157806323b872dd1461051457600080fd5b8063081812fc11610382578063081812fc14610435578063095ea7b3146104765780630d6a20331461048b5780631376f3da146104ab57600080fd5b806301ffc9a7146103a9578063047fc9aa146103eb57806306fdde0314610402575b600080fd5b6103d66103b736600461371b565b6001600160e01b03191660009081526015602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6103f460025481565b6040519081526020016103e2565b610428604051806040016040528060078152602001667665415048524160c81b81525081565b6040516103e29190613790565b61045e6104433660046137a3565b6000908152601060205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016103e2565b6104896104843660046137d1565b6109c2565b005b6103f46104993660046137a3565b600a6020526000908152604090205481565b6104be6104b93660046137fd565b610ad6565b60408051600f95860b81529390940b60208401529282015260608101919091526080016103e2565b6104896104f436600461381f565b610b1d565b6103f4610b9a565b6103f461050f3660046137fd565b610baa565b61048961052236600461383c565b610bdd565b436103f4565b61048961053b3660046137a3565b610c10565b6103f461054e3660046137d1565b6001600160a01b03919091166000908152601260209081526040808320938352929052205490565b61057e601281565b60405160ff90911681526020016103e2565b61048961059e36600461383c565b610ee8565b6103d66105b13660046137d1565b610f25565b6105c96105c43660046137a3565b610f38565b604051600f9190910b81526020016103e2565b600c5461045e906001600160a01b031681565b6104896105fd36600461381f565b610f7b565b610428604051806040016040528060058152602001640312e302e360dc1b81525081565b610428610fb4565b61045e61063c3660046137a3565b6000908152600f60205260409020546001600160a01b031690565b6103f46106653660046137fd565b611042565b6103f46106783660046137a3565b60046020526000908152604090205481565b6103f461069836600461381f565b61108d565b6103f46106ab3660046137a3565b6110ab565b6105c96106be3660046137a3565b600960205260009081526040902054600f0b81565b6104896106e136600461381f565b61110b565b60165460ff166103d6565b6103f46106ff3660046137fd565b6111f5565b60005461045e906001600160a01b031681565b6103d66107253660046137a3565b600b6020526000908152604090205460ff1681565b6103f460055481565b6103f46107513660046137a3565b611201565b6104896107643660046137a3565b6113a3565b6104896107773660046137fd565b6113e7565b61048961078a36600461388b565b61150d565b61048961079d3660046137fd565b6115b4565b6104896117a2565b6107d86107b83660046137a3565b60036020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b83526020830191909152016103e2565b610489610800366004613950565b611836565b60015461045e906001600160a01b031681565b6104896108263660046137a3565b611985565b6104896119b4565b6104286108413660046137a3565b6119f4565b6104896108543660046139d0565b611b2f565b6104896108673660046137fd565b611b78565b6104be61087a3660046137a3565b600660205260009081526040902080546001820154600290920154600f82810b93600160801b909304900b919084565b6103f46108b8366004613a19565b611d08565b6103f46108cb3660046137fd565b611d54565b6103f46108de3660046137a3565b60086020526000908152604090205481565b6103f46108fe3660046137a3565b611d60565b6103d6610911366004613a52565b6001600160a01b03918216600090815260146020908152604080832093909416825291909152205460ff1690565b61048961094d3660046137fd565b611d88565b6103f46109603660046137a3565b60009081526003602052604090206001015490565b6104896109833660046137a3565b611e71565b61045e7f000000000000000000000000000000000000000000000000000000000000000081565b6104896109bd3660046137a3565b611ea2565b60165460ff166109ed5760405162461bcd60e51b81526004016109e490613a80565b60405180910390fd5b6000818152600f60205260409020546001600160a01b031680610a0f57600080fd5b806001600160a01b0316836001600160a01b03161415610a2e57600080fd5b6000828152600f60209081526040808320546001600160a01b0385811685526014845282852033808752945291909320549216149060ff168180610a6f5750805b610a7857600080fd5b60008481526010602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918716917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050505050565b600760205281600052604060002081633b9aca008110610af557600080fd5b6003020180546001820154600290920154600f82810b9550600160801b90920490910b925084565b610b33336000356001600160e01b031916611ed4565b610b4f5760405162461bcd60e51b81526004016109e490613ab7565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000610ba5426110ab565b905090565b600082815260076020526040812082633b9aca008110610bcc57610bcc613add565b600302016001015490505b92915050565b60165460ff16610bff5760405162461bcd60e51b81526004016109e490613a80565b610c0b83838333611f7d565b505050565b60165460ff16610c325760405162461bcd60e51b81526004016109e490613a80565b601654610100900460ff16600114610c4957600080fd5b6016805461ff001916610200179055610c623382612043565b610c6e57610c6e613af3565b6000818152600a6020526040902054158015610c9957506000818152600b602052604090205460ff16155b610cb55760405162461bcd60e51b81526004016109e490613b09565b60008181526003602090815260409182902082518084019093528054600f0b835260010154908201819052421015610d285760405162461bcd60e51b8152602060048201526016602482015275546865206c6f636b206469646e27742065787069726560501b60448201526064016109e4565b8051604080518082018252600080825260208083018281528783526003909152929020905181546001600160801b0319166001600160801b039091161781559051600190910155600254600f9190910b90610d838282613b41565b6002556040805180820190915260008082526020820152610da790859085906120a9565b60405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610e14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e389190613b58565b610e4457610e44613af3565b610e4d846126c8565b60408051858152602081018490524281830152905133917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94919081900360600190a27f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c81610ebb8482613b41565b6040805192835260208301919091520160405180910390a150506016805461ff0019166101001790555050565b60165460ff16610f0a5760405162461bcd60e51b81526004016109e490613a80565b610c0b83838360405180602001604052806000815250611836565b6000610f318383612043565b9392505050565b6000818152600860209081526040808320546007909252822081633b9aca008110610f6557610f65613add565b6003020154600160801b9004600f0b9392505050565b600c546001600160a01b03163314610f9257600080fd5b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600d8054610fc190613b75565b80601f0160208091040260200160405190810160405280929190818152602001828054610fed90613b75565b801561103a5780601f1061100f5761010080835404028352916020019161103a565b820191906000526020600020905b81548152906001019060200180831161101d57829003601f168201915b505050505081565b601654600090610100900460ff1660011461105c57600080fd5b6016805461ff001916610200179055611076838333612787565b90506016805461ff00191661010017905592915050565b6001600160a01b038116600090815260116020526040812054610bd7565b600554600081815260066020908152604080832081516080810183528154600f81810b8352600160801b909104900b9381019390935260018101549183019190915260020154606082015290919061110381856128ec565b949350505050565b6000546001600160a01b03163314806111a0575060015460405163b700961360e01b81526001600160a01b039091169063b70096139061115f90339030906001600160e01b03196000351690600401613bb0565b602060405180830381865afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190613b58565b6111a957600080fd5b600180546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b6000610f3183836129ee565b60004382111561121357611213613af3565b60055460006112228483612ccb565b600081815260066020908152604080832081516080810183528154600f81810b8352600160801b909104900b9381019390935260018101549183019190915260020154606082015291925083831015611331576000600681611285866001613bdd565b8152602080820192909252604090810160002081516080810183528154600f81810b8352600160801b909104900b938101939093526001810154918301919091526002015460608083018290528501519192501461132b57826060015181606001516112f19190613b41565b836040015182604001516113059190613b41565b6060850151611314908a613b41565b61131e9190613bf5565b6113289190613c2a565b91505b50611380565b4382606001511461138057606082015161134b9043613b41565b604083015161135a9042613b41565b60608401516113699089613b41565b6113739190613bf5565b61137d9190613c2a565b90505b611399828284604001516113949190613bdd565b6128ec565b9695505050505050565b600c546001600160a01b031633146113ba57600080fd5b6000818152600a60205260409020546113d590600190613b41565b6000918252600a602052604090912055565b601654610100900460ff166001146113fe57600080fd5b6016805461ff0019166102001790556114173383612043565b61142357611423613af3565b60008281526003602090815260409182902082518084019093528054600f0b835260010154908201528115158061145d575060165460ff16155b61146957611469613af3565b60008160000151600f0b1380611482575060165460ff16155b6114c75760405162461bcd60e51b8152602060048201526016602482015275139bc8195e1a5cdd1a5b99c81b1bd8dac8199bdd5b9960521b60448201526064016109e4565b428160200151116114ea5760405162461bcd60e51b81526004016109e490613c3e565b6114f983836000846002612d55565b50506016805461ff00191661010017905550565b60165460ff1661152f5760405162461bcd60e51b81526004016109e490613a80565b6001600160a01b03821633141561154857611548613af3565b3360008181526014602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b601654610100900460ff166001146115cb57600080fd5b6016805461ff0019166102001790556115e43383612043565b6115f0576115f0613af3565b600082815260036020908152604080832081518083019092528054600f0b825260010154918101919091529062093a808061162b8542613bdd565b6116359190613c2a565b61163f9190613bf5565b9050428260200151116116835760405162461bcd60e51b815260206004820152600c60248201526b131bd8dac8195e1c1a5c995960a21b60448201526064016109e4565b60008260000151600f0b136116ce5760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81a5cc81b1bd8dad959607a1b60448201526064016109e4565b816020015181116117215760405162461bcd60e51b815260206004820152601f60248201527f43616e206f6e6c7920696e637265617365206c6f636b206475726174696f6e0060448201526064016109e4565b61172f6303c2670042613bdd565b81111561177e5760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652034207965617273206d6178000060448201526064016109e4565b61178d84600083856003612d55565b50506016805461ff0019166101001790555050565b6117b8336000356001600160e01b031916611ed4565b6117d45760405162461bcd60e51b81526004016109e490613ab7565b60165460ff16156118275760405162461bcd60e51b815260206004820152601760248201527f756e6c6f636b20616c72656164792068617070656e656400000000000000000060448201526064016109e4565b6016805460ff19166001179055565b60165460ff166118585760405162461bcd60e51b81526004016109e490613a80565b61186484848433611f7d565b823b1561197f57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061189d903390889087908790600401613c82565b6020604051808303816000875af19250505080156118d8575060408051601f3d908101601f191682019092526118d591810190613cb5565b60015b61197d573d808015611906576040519150601f19603f3d011682016040523d82523d6000602084013e61190b565b606091505b5080516119755760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109e4565b805181602001fd5b505b50505050565b600c546001600160a01b0316331461199c57600080fd5b6000908152600b60205260409020805460ff19169055565b6119f2600060405180604001604052806000600f0b8152602001600081525060405180604001604052806000600f0b815260200160008152506120a9565b565b6000818152600f60205260409020546060906001600160a01b0316611a5b5760405162461bcd60e51b815260206004820152601b60248201527f517565727920666f72206e6f6e6578697374656e7420746f6b656e000000000060448201526064016109e4565b60008281526003602090815260409182902082518084019093528054600f0b83526001015490820152610f3183611a928142612f5a565b83602001518460000151600f0b600d8054611aac90613b75565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad890613b75565b8015611b255780601f10611afa57610100808354040283529160200191611b25565b820191906000526020600020905b815481529060010190602001808311611b0857829003601f168201915b505050505061302c565b611b45336000356001600160e01b031916611ed4565b611b615760405162461bcd60e51b81526004016109e490613ab7565b8051611b7490600d906020840190613669565b5050565b60165460ff16611b9a5760405162461bcd60e51b81526004016109e490613a80565b6000828152600a6020526040902054158015611bc557506000828152600b602052604090205460ff16155b611be15760405162461bcd60e51b81526004016109e490613b09565b80821415611bee57600080fd5b611bf83383612043565b611c0157600080fd5b611c0b3382612043565b611c1457600080fd5b6000828152600360208181526040808420815180830183528154600f90810b825260019283015482860190815288885295855283872084518086019095528054820b855290920154938301849052805194519095929490910b921115611c7e578260200151611c84565b83602001515b604080518082018252600080825260208083018281528b835260038252848320935184546001600160801b0319166001600160801b0390911617845551600190930192909255825180840190935280835290820152909150611ce990879086906120a9565b611cf2866126c8565b611d00858383866004612d55565b505050505050565b601654600090610100900460ff16600114611d2257600080fd5b6016805461ff001916610200179055611d3c848484612787565b90506016805461ff0019166101001790559392505050565b6000610f318383612f5a565b600081815260046020526040812054431415611d7e57506000919050565b610bd78242612f5a565b601654610100900460ff16600114611d9f57600080fd5b6016805461ff00191661020017905560008281526003602090815260409182902082518084019093528054600f0b8352600101549082015281611de157600080fd5b60008160000151600f0b1380611dfa575060165460ff16155b611e3f5760405162461bcd60e51b8152602060048201526016602482015275139bc8195e1a5cdd1a5b99c81b1bd8dac8199bdd5b9960521b60448201526064016109e4565b42816020015111611e625760405162461bcd60e51b81526004016109e490613c3e565b6114f983836000846000612d55565b600c546001600160a01b03163314611e8857600080fd5b6000818152600a60205260409020546113d5906001613bdd565b600c546001600160a01b03163314611eb957600080fd5b6000908152600b60205260409020805460ff19166001179055565b6001546000906001600160a01b03168015801590611f5e575060405163b700961360e01b81526001600160a01b0382169063b700961390611f1d90879030908890600401613bb0565b602060405180830381865afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190613b58565b8061110357506000546001600160a01b03858116911614949350505050565b6000828152600a6020526040902054158015611fa857506000828152600b602052604090205460ff16155b611fc45760405162461bcd60e51b81526004016109e490613b09565b611fce8183612043565b611fd757600080fd5b611fe18483613166565b611feb84836131cb565b611ff5838361324c565b6000828152600460205260408082204390555183916001600160a01b0380871692908816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b6000818152600f602090815260408083205460108352818420546001600160a01b039182168086526014855283862088841680885295529285205492938085149392909116149060ff1682806120965750815b8061209e5750805b979650505050505050565b6040805160808101825260008082526020820181905291810182905260608101919091526040805160808101825260008082526020820181905291810182905260608101919091526005546000908190871561221557428760200151118015612119575060008760000151600f0b135b1561215e57865161212f906303c2670090613cd2565b600f0b602080870191909152870151612149904290613b41565b85602001516121589190613d10565b600f0b85525b428660200151118015612178575060008660000151600f0b135b156121bd57855161218e906303c2670090613cd2565b600f0b6020808601919091528601516121a8904290613b41565b84602001516121b79190613d10565b600f0b84525b602080880151600090815260098252604090205490870151600f9190910b935015612215578660200151866020015114156121fa57829150612215565b602080870151600090815260099091526040902054600f0b91505b60408051608081018252600080825260208201524291810191909152436060820152811561228a575060008181526006602090815260409182902082516080810184528154600f81810b8352600160801b909104900b9281019290925260018101549282019290925260029091015460608201525b6040810151816000428310156122d75760408401516122a99042613b41565b60608501516122b89043613b41565b6122ca90670de0b6b3a7640000613bf5565b6122d49190613c2a565b90505b600062093a806122e78186613c2a565b6122f19190613bf5565b905060005b60ff81101561246c5761230c62093a8083613bdd565b915060004283111561232057429250612334565b50600082815260096020526040902054600f0b5b61233e8684613b41565b876020015161234d9190613d10565b8751889061235c908390613da5565b600f0b905250602087018051829190612376908390613df5565b600f90810b90915288516000910b1215905061239157600087525b60008760200151600f0b12156123a957600060208801525b60408088018490528501519295508592670de0b6b3a7640000906123cd9085613b41565b6123d79086613bf5565b6123e19190613c2a565b85606001516123f09190613bdd565b6060880152612400600189613bdd565b975042831415612416575043606087015261246c565b6000888152600660209081526040918290208951918a01516001600160801b03908116600160801b02921691909117815590880151600182015560608801516002909101555061246581613e44565b90506122f6565b505060058590558b156124f7578860200151886020015161248d9190613da5565b8460200181815161249e9190613df5565b600f0b905250885188516124b29190613da5565b845185906124c1908390613df5565b600f90810b90915260208601516000910b121590506124e257600060208501525b60008460000151600f0b12156124f757600084525b6000858152600660209081526040918290208651918701516001600160801b03908116600160801b02921691909117815590850151600182015560608501516002909101558b156126ba57428b6020015111156125af57602089015161255d9088613df5565b96508a602001518a60200151141561258157602088015161257e9088613da5565b96505b60208b810151600090815260099091526040902080546001600160801b0319166001600160801b0389161790555b428a60200151111561260a578a602001518a60200151111561260a5760208801516125da9087613da5565b60208b810151600090815260099091526040902080546001600160801b0319166001600160801b03831617905595505b60008c815260086020526040812054612624906001613bdd565b905080600860008f815260200190815260200160002081905550428960400181815250504389606001818152505088600760008f815260200190815260200160002082633b9aca00811061267a5761267a613add565b825160208401516001600160801b03908116600160801b029116176003919091029190910190815560408201516001820155606090910151600290910155505b505050505050505050505050565b6126d23382612043565b61271e5760405162461bcd60e51b815260206004820181905260248201527f63616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656460448201526064016109e4565b6000818152600f60205260408120546001600160a01b03169061274190836109c2565b61274b33836131cb565b60405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008062093a80806127998642613bdd565b6127a39190613c2a565b6127ad9190613bf5565b905060008511806127c1575060165460ff16155b6127ca57600080fd5b4281116128285760405162461bcd60e51b815260206004820152602660248201527f43616e206f6e6c79206c6f636b20756e74696c2074696d6520696e207468652060448201526566757475726560d01b60648201526084016109e4565b6128366303c2670042613bdd565b8111156128855760405162461bcd60e51b815260206004820152601e60248201527f566f74696e67206c6f636b2063616e2062652032207965617273206d6178000060448201526064016109e4565b600e6000815461289490613e44565b90915550600e546128a584826132e2565b5060008181526003602090815260409182902082518084019093528054600f0b8352600190810154918301919091526128e391839189918691612d55565b95945050505050565b600080839050600062093a808083604001516129089190613c2a565b6129129190613bf5565b905060005b60ff8110156129c65761292d62093a8083613bdd565b915060008583111561294157859250612955565b50600082815260096020526040902054600f0b5b60408401516129649084613b41565b84602001516129739190613d10565b84518590612982908390613da5565b600f0b9052508286141561299657506129c6565b80846020018181516129a89190613df5565b600f0b90525050604083018290526129bf81613e44565b9050612917565b5060008260000151600f0b12156129dc57600082525b50516001600160801b03169392505050565b600043821115612a0057612a00613af3565b600083815260086020526040812054815b6080811015612aa457818310612a2657612aa4565b60006002612a348486613bdd565b612a3f906001613bdd565b612a499190613c2a565b6000888152600760205260409020909150869082633b9aca008110612a7057612a70613add565b600302016002015411612a8557809350612a93565b612a90600182613b41565b92505b50612a9d81613e44565b9050612a11565b50600085815260076020526040812083633b9aca008110612ac757612ac7613add565b60408051608081018252600392909202929092018054600f81810b8452600160801b909104900b602083015260018101549282019290925260029091015460608201526005549091506000612b1c8783612ccb565b600081815260066020908152604080832081516080810183528154600f81810b8352600160801b909104900b938101939093526001810154918301919091526002015460608201529192508084841015612bfb576000600681612b80876001613bdd565b8152602080820192909252604090810160002081516080810183528154600f81810b8352600160801b909104900b93810193909352600181015491830191909152600201546060808301829052860151919250612bdd9190613b41565b925083604001518160400151612bf39190613b41565b915050612c1f565b6060830151612c0a9043613b41565b9150826040015142612c1c9190613b41565b90505b60408301518215612c5c578284606001518c612c3b9190613b41565b612c459084613bf5565b612c4f9190613c2a565b612c599082613bdd565b90505b6040870151612c6b9082613b41565b8760200151612c7a9190613d10565b87518890612c89908390613da5565b600f90810b90915288516000910b129050612cb957505093516001600160801b03169650610bd795505050505050565b60009950505050505050505050610bd7565b60008082815b6080811015612d4b57818310612ce657612d4b565b60006002612cf48486613bdd565b612cff906001613bdd565b612d099190613c2a565b6000818152600660205260409020600201549091508710612d2c57809350612d3a565b612d37600182613b41565b92505b50612d4481613e44565b9050612cd1565b5090949350505050565b6002548290612d648682613bdd565b6002556040805180820190915260008082526020820152825160208085015190830152600f0b8152825187908490612d9d908390613df5565b600f0b9052508515612db157602083018690525b6000888152600360209081526040909120845181546001600160801b0319166001600160801b0390911617815590840151600190910155612df38882856120a9565b338715801590612e1557506004856004811115612e1257612e12613e5f565b14155b15612ebf576040516323b872dd60e01b81526001600160a01b038281166004830152306024830152604482018a90527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015612e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb39190613b58565b612ebf57612ebf613af3565b8360200151816001600160a01b03167fff04ccafc360e16b67d682d17bd9503c4c6b9a131f6be6325762dc9ffc7de6248b8b8942604051612f039493929190613e75565b60405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c83612f378a82613bdd565b6040805192835260208301919091520160405180910390a1505050505050505050565b60008281526008602052604081205480612f78576000915050610bd7565b600084815260076020526040812082633b9aca008110612f9a57612f9a613add565b60408051608081018252600392909202929092018054600f81810b8452600160801b909104900b602083015260018101549282018390526002015460608201529150612fe69085613eb3565b8160200151612ff59190613d10565b81518290613004908390613da5565b600f90810b90915282516000910b1215905061301f57600081525b51600f0b9150610bd79050565b606060405180610120016040528060fd81526020016141ee60fd913990508061305487613345565b604051602001613065929190613ef2565b60405160208183030381529060405290508061308086613345565b604051602001613091929190613f6e565b6040516020818303038152906040529050806130ac85613345565b6040516020016130bd929190613fee565b6040516020818303038152906040529050806130d884613345565b6040516020016130e992919061406f565b6040516020818303038152906040529050600061313861310888613345565b8461311285613443565b604051602001613124939291906140ca565b604051602081830303815290604052613443565b90508060405160200161314b9190614194565b60405160208183030381529060405291505095945050505050565b6000818152600f60205260409020546001600160a01b0383811691161461318f5761318f613af3565b6000818152601060205260409020546001600160a01b031615611b7457600090815260106020526040902080546001600160a01b031916905550565b6000818152600f60205260409020546001600160a01b038381169116146131f4576131f4613af3565b6000818152600f6020526040902080546001600160a01b031916905561321a82826135a9565b6001600160a01b0382166000908152601160205260408120805460019290613243908490613b41565b90915550505050565b6000818152600f60205260409020546001600160a01b03161561327157613271613af3565b6000818152600f6020908152604080832080546001600160a01b0319166001600160a01b038716908117909155808452601180845282852080546012865284872081885286528487208890558787526013865293862093909355908452909152805460019290613243908490613bdd565b60006001600160a01b0383166132fa576132fa613af3565b613304838361324c565b60405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450600192915050565b6060816133695750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613393578061337d81613e44565b915061338c9050600a83613c2a565b915061336d565b60008167ffffffffffffffff8111156133ae576133ae6138c4565b6040519080825280601f01601f1916602001820160405280156133d8576020820181803683370190505b5090505b8415611103576133ed600183613b41565b91506133fa600a866141d9565b613405906030613bdd565b60f81b81838151811061341a5761341a613add565b60200101906001600160f81b031916908160001a90535061343c600a86613c2a565b94506133dc565b805160609080613463575050604080516020810190915260008152919050565b60006003613472836002613bdd565b61347c9190613c2a565b613487906004613bf5565b90506000613496826020613bdd565b67ffffffffffffffff8111156134ae576134ae6138c4565b6040519080825280601f01601f1916602001820160405280156134d8576020820181803683370190505b50905060006040518060600160405280604081526020016142eb604091399050600181016020830160005b86811015613564576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101613503565b50600386066001811461357e576002811461358f5761359b565b613d3d60f01b60011983015261359b565b603d60f81b6000198301525b505050918152949350505050565b6001600160a01b0382166000908152601160205260408120546135ce90600190613b41565b6000838152601360205260409020549091508082141561361e576001600160a01b03841660009081526012602090815260408083208584528252808320839055858352601390915281205561197f565b6001600160a01b039390931660009081526012602090815260408083209383529281528282208054868452848420819055835260139091528282209490945592839055908252812055565b82805461367590613b75565b90600052602060002090601f01602090048101928261369757600085556136dd565b82601f106136b057805160ff19168380011785556136dd565b828001600101855582156136dd579182015b828111156136dd5782518255916020019190600101906136c2565b506136e99291506136ed565b5090565b5b808211156136e957600081556001016136ee565b6001600160e01b03198116811461371857600080fd5b50565b60006020828403121561372d57600080fd5b8135610f3181613702565b60005b8381101561375357818101518382015260200161373b565b8381111561197f5750506000910152565b6000815180845261377c816020860160208601613738565b601f01601f19169290920160200192915050565b602081526000610f316020830184613764565b6000602082840312156137b557600080fd5b5035919050565b6001600160a01b038116811461371857600080fd5b600080604083850312156137e457600080fd5b82356137ef816137bc565b946020939093013593505050565b6000806040838503121561381057600080fd5b50508035926020909101359150565b60006020828403121561383157600080fd5b8135610f31816137bc565b60008060006060848603121561385157600080fd5b833561385c816137bc565b9250602084013561386c816137bc565b929592945050506040919091013590565b801515811461371857600080fd5b6000806040838503121561389e57600080fd5b82356138a9816137bc565b915060208301356138b98161387d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156138f5576138f56138c4565b604051601f8501601f19908116603f0116810190828211818310171561391d5761391d6138c4565b8160405280935085815286868601111561393657600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561396657600080fd5b8435613971816137bc565b93506020850135613981816137bc565b925060408501359150606085013567ffffffffffffffff8111156139a457600080fd5b8501601f810187136139b557600080fd5b6139c4878235602084016138da565b91505092959194509250565b6000602082840312156139e257600080fd5b813567ffffffffffffffff8111156139f957600080fd5b8201601f81018413613a0a57600080fd5b611103848235602084016138da565b600080600060608486031215613a2e57600080fd5b83359250602084013591506040840135613a47816137bc565b809150509250925092565b60008060408385031215613a6557600080fd5b8235613a70816137bc565b915060208301356138b9816137bc565b60208082526019908201527f636f6e7472616374206d75737420626520756e6c6f636b656400000000000000604082015260600190565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b602080825260089082015267185d1d1858da195960c21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015613b5357613b53613b2b565b500390565b600060208284031215613b6a57600080fd5b8151610f318161387d565b600181811c90821680613b8957607f821691505b60208210811415613baa57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60008219821115613bf057613bf0613b2b565b500190565b6000816000190483118215151615613c0f57613c0f613b2b565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613c3957613c39613c14565b500490565b60208082526024908201527f43616e6e6f742061646420746f2065787069726564206c6f636b2e20576974686040820152636472617760e01b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061139990830184613764565b600060208284031215613cc757600080fd5b8151610f3181613702565b600081600f0b83600f0b80613ce957613ce9613c14565b60016001607f1b0319821460001982141615613d0757613d07613b2b565b90059392505050565b600081600f0b83600f0b60016001607f1b03600082136000841383830485118282161615613d4057613d40613b2b565b60016001607f1b03196000851282811687830587121615613d6357613d63613b2b565b60008712925085820587128484161615613d7f57613d7f613b2b565b85850587128184161615613d9557613d95613b2b565b5050509290910295945050505050565b600081600f0b83600f0b600081128160016001607f1b031901831281151615613dd057613dd0613b2b565b8160016001607f1b03018313811615613deb57613deb613b2b565b5090039392505050565b600081600f0b83600f0b600082128260016001607f1b0303821381151615613e1f57613e1f613b2b565b8260016001607f1b0319038212811615613e3b57613e3b613b2b565b50019392505050565b6000600019821415613e5857613e58613b2b565b5060010190565b634e487b7160e01b600052602160045260246000fd5b848152602081018490526080810160058410613ea157634e487b7160e01b600052602160045260246000fd5b60408201939093526060015292915050565b60008083128015600160ff1b850184121615613ed157613ed1613b2b565b6001600160ff1b0384018313811615613eec57613eec613b2b565b50500390565b60008351613f04818460208801613738565b6503a37b5b2b7160d51b9083019081528351613f27816006840160208801613738565b7f3c2f746578743e3c7465787420783d2231302220793d2234302220636c61737360069290910191820152671e913130b9b2911f60c11b6026820152602e01949350505050565b60008351613f80818460208801613738565b6903130b630b731b2a7b3160b51b9083019081528351613fa781600a840160208801613738565b7f3c2f746578743e3c7465787420783d2231302220793d2236302220636c617373600a9290910191820152671e913130b9b2911f60c11b602a820152603201949350505050565b60008351614000818460208801613738565b6a03637b1b5b2b22fb2b732160ad1b908301908152835161402881600b840160208801613738565b7f3c2f746578743e3c7465787420783d2231302220793d2238302220636c617373600b9290910191820152671e913130b9b2911f60c11b602b820152603301949350505050565b60008351614081818460208801613738565b6503b30b63ab2960d51b90830190815283516140a4816006840160208801613738565b6c1e17ba32bc3a1f1e17b9bb339f60991b60069290910191820152601301949350505050565b707b226e616d65223a20224261646765202360781b815283516000906140f7816011850160208901613738565b72111610113232b9b1b934b83a34b7b7111d101160691b601191840191820152845161412a816024840160208901613738565b7f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b602492909101918201526618985cd94d8d0b60ca1b6044820152835161417881604b840160208801613738565b61227d60f01b604b9290910191820152604d0195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516141cc81601d850160208701613738565b91909101601d0192915050565b6000826141e8576141e8613c14565b50069056fe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033353020333530223e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b207d3c2f7374796c653e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7465787420783d2231302220793d2232302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122067c5a9ff4136c7ab55ac4f81e85ab66a538b3e1b8b701bb048164a97fc26971564736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.",
          "_tokenId": "ID of the token to be approved."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`.      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.",
        "params": {
          "_owner": "Address for whom to query the balance."
        }
      },
      "constructor": {
        "params": {
          "AUTHORITY_": "`Authority`  address",
          "GOVERNANCE_": "`GOVERNANCE`  address",
          "TOKEN_ADDR_": "`ERC20APHRA` token address"
        }
      },
      "create_lock(uint256,uint256)": {
        "params": {
          "_lock_duration": "Number of seconds to lock tokens for (rounded down to nearest week)",
          "_value": "Amount to deposit"
        }
      },
      "create_lock_for(uint256,uint256,address)": {
        "params": {
          "_lock_duration": "Number of seconds to lock tokens for (rounded down to nearest week)",
          "_to": "Address to deposit",
          "_value": "Amount to deposit"
        }
      },
      "deposit_for(uint256,uint256)": {
        "details": "Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user",
        "params": {
          "_tokenId": "lock NFT",
          "_value": "Amount to add to user's lock"
        }
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of."
        }
      },
      "get_last_user_slope(uint256)": {
        "params": {
          "_tokenId": "token of the NFT"
        },
        "returns": {
          "_0": "Value of the slope"
        }
      },
      "increase_amount(uint256,uint256)": {
        "params": {
          "_value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increase_unlock_time(uint256,uint256)": {
        "params": {
          "_lock_duration": "New number of seconds until tokens unlock"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.",
        "params": {
          "_operator": "The address that acts on behalf of the owner.",
          "_owner": "The address that owns the NFTs."
        }
      },
      "locked__end(uint256)": {
        "params": {
          "_tokenId": "User NFT"
        },
        "returns": {
          "_0": "Epoch time of the lock end"
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT.",
        "params": {
          "_tokenId": "The identifier for an NFT."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address.      Throws unless `msg.sender` is the current owner, an authorized operator, or the      approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of      `msg.sender`'s assets. It also emits the ApprovalForAll event.      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.",
          "_operator": "Address to add to the set of authorized operators."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "_interfaceID": "Id of the interface"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Get token by index"
      },
      "tokenURI(uint256)": {
        "details": "Returns current token URI metadata",
        "params": {
          "_tokenId": "Token ID to fetch URI for."
        }
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_block": "Block to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power at `_block`"
        }
      },
      "totalSupplyAtT(uint256)": {
        "details": "Adheres to the ERC20 `totalSupply` interface for Aragon compatibility",
        "returns": {
          "_0": "Total voting power"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT.      Throws if `_from` is not the current owner.      Throws if `_to` is the zero address.      Throws if `_tokenId` is not a valid NFT.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "user_point_history__ts(uint256,uint256)": {
        "params": {
          "_idx": "User epoch number",
          "_tokenId": "token of the NFT"
        },
        "returns": {
          "_0": "Epoch time of the checkpoint"
        }
      },
      "withdraw(uint256)": {
        "details": "Only possible if the lock has expired"
      }
    },
    "stateVariables": {
      "ERC165_INTERFACE_ID": {
        "details": "ERC165 interface ID of ERC165"
      },
      "ERC721_INTERFACE_ID": {
        "details": "ERC165 interface ID of ERC721"
      },
      "ERC721_METADATA_INTERFACE_ID": {
        "details": "ERC165 interface ID of ERC721Metadata"
      },
      "_not_entered": {
        "details": "reentrancy guard"
      },
      "idToApprovals": {
        "details": "Mapping from NFT ID to approved address."
      },
      "idToOwner": {
        "details": "Mapping from NFT ID to the address that owns it."
      },
      "name": {
        "details": "Returns the token collection name."
      },
      "ownerToNFTokenCount": {
        "details": "Mapping from owner address to count of his tokens."
      },
      "ownerToNFTokenIdList": {
        "details": "Mapping from owner address to mapping of index to tokenIds"
      },
      "ownerToOperators": {
        "details": "Mapping from owner address to mapping of operator addresses."
      },
      "supportedInterfaces": {
        "details": "Mapping of interface id to bool about whether or not it's supported"
      },
      "symbol": {
        "details": "Returns the token collection symbol."
      },
      "tokenId": {
        "details": "Current count of token"
      },
      "tokenToOwnerIndex": {
        "details": "Mapping from NFT ID to index of owner"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkpoint()": {
        "notice": "Record global data to checkpoint"
      },
      "constructor": {
        "notice": "Contract constructor"
      },
      "create_lock(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`"
      },
      "create_lock_for(uint256,uint256,address)": {
        "notice": "Deposit `_value` tokens for `_to` and lock for `_lock_duration`"
      },
      "deposit_for(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `_tokenId` and add to the lock"
      },
      "get_last_user_slope(uint256)": {
        "notice": "Get the most recently recorded rate of voting power decrease for `_tokenId`"
      },
      "increase_amount(uint256,uint256)": {
        "notice": "Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time"
      },
      "increase_unlock_time(uint256,uint256)": {
        "notice": "Extend the unlock time for `_tokenId`"
      },
      "locked__end(uint256)": {
        "notice": "Get timestamp when `_tokenId`'s lock finishes"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time."
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at some point in the past"
      },
      "totalSupplyAtT(uint256)": {
        "notice": "Calculate total voting power"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else        they maybe be permanently lost."
      },
      "user_point_history__ts(uint256,uint256)": {
        "notice": "Get the timestamp for checkpoint `_idx` for `_tokenId`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw all tokens for `_tokenId`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Authority)171"
      },
      {
        "astId": 17928,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "supply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17933,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "locked",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedBalance)17861_storage)"
      },
      {
        "astId": 17937,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "ownership_change",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17939,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "epoch",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 17944,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "point_history",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Point)17856_storage)"
      },
      {
        "astId": 17951,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "user_point_history",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_struct(Point)17856_storage)1000000000_storage)"
      },
      {
        "astId": 17955,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "user_point_epoch",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17959,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "slope_changes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_int128)"
      },
      {
        "astId": 17963,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "attachments",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17967,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "voted",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 17969,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "voter",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 17983,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "badgeDescription",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 17986,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "tokenId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 17991,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "idToOwner",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 17996,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "idToApprovals",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 18001,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "ownerToNFTokenCount",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18008,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "ownerToNFTokenIdList",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 18013,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "tokenToOwnerIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18020,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "ownerToOperators",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 18025,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "supportedInterfaces",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 18039,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "_unlocked",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 18049,
        "contract": "srcBuild/veAPHRA.sol:veAPHRA",
        "label": "_entered_state",
        "offset": 1,
        "slot": "22",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)17856_storage)1000000000_storage": {
        "base": "t_struct(Point)17856_storage",
        "encoding": "inplace",
        "label": "struct Point[1000000000]",
        "numberOfBytes": "96000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(Authority)171": {
        "encoding": "inplace",
        "label": "contract Authority",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Point)17856_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)17856_storage)1000000000_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_uint256,t_struct(LockedBalance)17861_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)17861_storage"
      },
      "t_mapping(t_uint256,t_struct(Point)17856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)17856_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)17861_storage": {
        "encoding": "inplace",
        "label": "struct LockedBalance",
        "members": [
          {
            "astId": 17858,
            "contract": "srcBuild/veAPHRA.sol:veAPHRA",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 17860,
            "contract": "srcBuild/veAPHRA.sol:veAPHRA",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)17856_storage": {
        "encoding": "inplace",
        "label": "struct Point",
        "members": [
          {
            "astId": 17849,
            "contract": "srcBuild/veAPHRA.sol:veAPHRA",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 17851,
            "contract": "srcBuild/veAPHRA.sol:veAPHRA",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 17853,
            "contract": "srcBuild/veAPHRA.sol:veAPHRA",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17855,
            "contract": "srcBuild/veAPHRA.sol:veAPHRA",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}